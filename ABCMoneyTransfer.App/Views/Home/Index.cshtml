@{
    ViewData["Title"] = "Dashboard";
}

<div id="app" v-pre v-cloak>
    <q-card flat>
        <q-toolbar dense class="bg-grey-2">
            <q-toolbar-title>
              Forex Rates
            </q-toolbar-title>
        </q-toolbar>
        <q-separator></q-separator>
        <q-card-section>
            <q-table dense class="data-table" dense :data="users" square row-key="name" :pagination="pagination" flat bordered>
                <q-tr class="disable-hover" slot="header" slot-scope="props">
                    <q-th class="text-left">Currency</q-th>
                    <q-th class="text-center">Iso3</q-th>
                    <q-th class="text-center">Buy</q-th>
                    <q-th class="text-center">Sell</q-th>
                </q-tr>
                <q-tr slot="body" slot-scope="props" :props="props">
                    <q-td class="text-left">{{ props.row.currency.name }}</q-td>
                    <q-td class="text-center">{{ props.row.currency.iso3 }}</q-td>
                    <q-td class="text-center">{{ props.row.buy }}</q-td>
                    <q-td class="text-center">{{ props.row.sell }}</q-td>
                </q-tr>
            </q-table>
        </q-card-section>
    </q-card>
</div>

@section scripts {
    <script>
        new Vue({
            el: '#app',
            data: function () {
                return {
                    users: [],
                    pagination: {
                        rowsPerPage: 50
                    },
                    buttonSubmitting: false,
                    insertDialog: false,
                    roles: [],
                    user: {
                        id: "",
                        username: "",
                        password: "",
                        confirmPassword: "",
                        name: "",
                        role: ""
                    },
                    selectedRole: null,
                };
            },
            methods: {
                getAll: async function () {
                    const vm = this;
                    try {
                        let response = await axios.get("/api/general/forex");
                        vm.users = response.data;
                    } catch (ex) {
                        vm.$handleError(ex);
                    }
                },
                getRoles: async function () {
                    const vm = this;
                    try {
                        let response = await axios.get("api/auth/roles");
                        vm.roles = response.data;
                    } catch (ex) {
                        vm.$handleError(ex);
                    }
                },
                openInsertDialog: function () {
                    const vm = this;
                    vm.insertDialog = true;
                    vm.user = {};


                },
                onSubmit: async function () {
                    let vm = this;
                    vm.$showLoader();
                    vm.buttonSubmitting = true;
                    try {
                        let response = await axios.post("/api/auth/register-user", {
                            Username: vm.user.username,
                            Password: vm.user.password,
                            Name: vm.user.name,
                            RoleId: vm.selectedRole,
                            ConfirmPassword: vm.user.confirmPassword
                        });
                        vm.$showSuccessMessage(response.data);
                        vm.insertDialog = false;
                        await vm.getAll();

                    } catch (e) {

                        vm.$handleError(e);
                    }
                    finally {

                        vm.$hideLoader();
                        vm.buttonSubmitting = false;
                    }


                },
                openUpdateDialog: function (block) {
                    const vm = this;
                    vm.updateDialog = true;
                    vm.block.id = block.id;
                    vm.block.name = block.name;
                    vm.block.alias = block.alias;
                    vm.block.isActive = block.isActive;
                },
                onDelete: function (id, name) {
                    let vm = this;
                    Quasar.Dialog.create({
                        title: 'Confirm',
                        message: `Are you sure to delete the User ${name} ?`,
                        cancel: true,
                        persistent: true
                    }).onOk(async () => {
                        try {
                            var response = await axios.post("/api/auth/unregister", { UserId: id });
                            vm.$showSuccessMessage(response.data);
                            vm.$reload();
                        } catch (ex) {
                            vm.$handleError(ex);
                        }
                    });
                }
            },
            async mounted() {
                let vm = this;
                vm.$showLoader();
                await vm.getAll();
                vm.$hideLoader();
            }
        });
    </script>
}
